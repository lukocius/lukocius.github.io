{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["Square","props","style","value","color","winner","fontSize","size","width","height","background","className","clickable","onClick","generateGridNxN","generatorFunction","rows","i","cols","j","push","key","Board","renderSquare","bind","this","squares","Component","Game","state","Array","fill","localWinners","lastMoveLocation","row","col","outerRow","outerCol","xIsNext","renderBoard","idx","lastRow","lastCol","currentBoard","inner_index","outer_index","outerSquares","slice","isBoardValid","calculateWinner","setState","prevState","Math","sqrt","length","x","y","lastPlayer","lines","diag","antidiag","reducer","accumulator","currentValue","lineName","line","reduce","p","handleClick","grid","App","React","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.519a5749.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Square(props) {\r\n    var style = {};\r\n    if (props.value){  // X and O will have different colors\r\n        style.color = props.value === 'X' ? '#fc7341' : '#2db2e2';\r\n    }\r\n\r\n    if (props.winner)  // Square is in completed sub-board.\r\n    {\r\n        style.fontSize = props.size*24;\r\n        style.width = props.size*(34-1)-1;\r\n        style.height = style.width;\r\n        if (props.winner === 'X'){\r\n            style.background = '#ffccb5';\r\n        }\r\n\r\n        else if (props.winner === 'O'){  // TODO Draw is possible.\r\n            style.background = '#dbf5ff';\r\n        }\r\n\r\n        else {\r\n            style.background = '#e2ffec';\r\n        }\r\n\r\n        return (\r\n            <div className='board'>\r\n            <div className='board-complete' style={style}>\r\n                {props.winner}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (props.clickable){\r\n        style.background= '#109910';\r\n    }\r\n\r\n    return (\r\n    <button className=\"square\" style={style} onClick={props.onClick}>\r\n        {props.value}\r\n    </button>   \r\n    ); \r\n}\r\n","import React, { Component} from \"react\";\r\nimport Square from \"./Square\";\r\n\r\n\r\n// Helper function. TODO move to separate file?\r\n// generatorFunction makes it so that in can be used for Å¾\r\n// nested grids (NxNxBxB  for example).\r\nexport function generateGridNxN(className, size, generatorFunction)\r\n{\r\n    var rows = [];\r\n    for (let i = 0; i < size; i++)\r\n    {\r\n        let cols = [];\r\n        for (let j = 0; j < size; j++)\r\n        {\r\n            cols.push(generatorFunction(i*size + j));\r\n        }\r\n        rows.push(\r\n            <div className={className+'-row'} key={i}>{cols}</div>\r\n        );\r\n    }\r\n    return (\r\n        <div className={className}>{rows}</div>\r\n    );\r\n}\r\n\r\nexport default class Board extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.renderSquare = this.renderSquare.bind(this);\r\n    }\r\n\r\n    renderSquare (i)  // give index to the square.\r\n    {\r\n        return (\r\n            <Square key={i}\r\n                value={this.props.squares[i]}\r\n                winner={this.props.winner}\r\n                clickable={this.props.clickable}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        )\r\n    }\r\n\r\n    render()\r\n    {\r\n        if (this.props.winner)\r\n        {\r\n            return (\r\n                <Square key={0}\r\n                value={this.props.winner}\r\n                winner={this.props.winner}\r\n                size={this.props.size}\r\n            />\r\n            )\r\n        }\r\n        return generateGridNxN(\r\n            'board',\r\n            this.props.size,\r\n            this.renderSquare\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Board, {generateGridNxN} from \"./Board\";\r\n\r\n\r\n// game state: \r\n//     board state size*size X size*size grid of values X, O or null\r\n//     move state: Player to move (X or O),\r\n//          valid moves based on the last move\r\n//          local wins state, outer board size*size grid of values X, O or null\r\n//     win state: If winner is known, no move is valid.\r\n//     if no move is valid, game over.\r\n\r\n\r\n\r\nexport default class Game extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        // Game state (board state + move state (+ win state)).\r\n        this.state = {\r\n          squares: Array(this.props.size*this.props.size).fill(\r\n            Array( this.props.size*this.props.size).fill(null)),\r\n          localWinners: Array(\r\n            this.props.size * this.props.size).fill(null),\r\n          lastMoveLocation: {row: null, col: null, outerRow: null, outerCol:null},\r\n          xIsNext: true,\r\n          winner: null\r\n        }\r\n        this.renderBoard=this.renderBoard.bind(this);\r\n    }\r\n\r\n    // return true if move on the board idx is valid.\r\n    isBoardValid(idx)\r\n    {\r\n        // board is complete, no move is valid.\r\n        if (this.state.winner)\r\n            return false;\r\n\r\n        const lastRow = this.state.lastMoveLocation.row;\r\n        const lastCol = this.state.lastMoveLocation.col;\r\n\r\n        // Not initialised. Valid.\r\n        if (lastRow === null || lastCol === null)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            const currentBoard = lastRow * this.props.size + lastCol;\r\n            if (this.state.localWinners[currentBoard])\r\n            {\r\n                // If local board is complete, next move\r\n                // is available in any non-complete board.\r\n                return this.state.localWinners[idx] === null;\r\n            }\r\n            else\r\n            {\r\n                return idx === currentBoard;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClick(inner_index, outer_index)  //size*size x size*size grid position.\r\n    {\r\n        const size = this.props.size;\r\n        // Copy outer and inner boards.\r\n        var outerSquares = this.state.squares.slice();\r\n        var squares = this.state.squares[outer_index].slice();\r\n        var localWinners = this.state.localWinners.slice();\r\n        \r\n        // If not clickable - do nothing.\r\n        if (this.state.winner || !this.isBoardValid(outer_index) || squares[inner_index])\r\n        {\r\n            return;\r\n        }\r\n        // else place a mark and update board state.\r\n        squares[inner_index] = this.state.xIsNext ? 'X' : 'O';\r\n        outerSquares[outer_index] = squares;\r\n\r\n        // update last move location\r\n        const lastMoveLocation = {\r\n            row: ~~(inner_index/size),\r\n            col: inner_index % size,\r\n            outerRow: ~~(outer_index/size),\r\n            outerCol: outer_index % size\r\n        } \r\n\r\n        // check for local winner in current board (or draw).\r\n        localWinners[outer_index] = this.calculateWinner(squares, lastMoveLocation);\r\n        \r\n        // check for global winner (or draw).\r\n        const winner = null;\r\n\r\n\r\n        this.setState((prevState, props) => ({\r\n            squares: outerSquares,\r\n            localWinners: localWinners,\r\n            lastMoveLocation: lastMoveLocation,\r\n            xIsNext: !this.state.xIsNext,\r\n            winner: winner\r\n        }))\r\n    }\r\n    \r\n    calculateWinner(squares, lastMoveLocation){\r\n        // First move - no winner.\r\n        if (!lastMoveLocation)\r\n            return null;\r\n\r\n        // This can be static function. Size already given.\r\n        const size = Math.sqrt(squares.length);\r\n\r\n        const x = lastMoveLocation.row;\r\n        const y = lastMoveLocation.col;\r\n        const lastPlayer = squares[x*size + y];\r\n        if (lastPlayer === null)\r\n            return null;\r\n\r\n        var lines = {row: [], col: [], diag: [], antidiag: []};\r\n        \r\n        for (let i=0; i<size;i++)\r\n        {\r\n            lines.row.push(x*size+i)\r\n        }\r\n\r\n        for (let i=0; i<size;i++)\r\n        {\r\n            lines.col.push(i*size+y)\r\n        }\r\n\r\n        // last move might not be on diagonal, but checking wont hurt\r\n        for (let i=0; i<size;i++)\r\n        {\r\n            lines.diag.push(i*size+i)\r\n        }\r\n        const reducer = (accumulator, currentValue) => accumulator && (squares[currentValue] === lastPlayer)\r\n        // anti-diagonal\r\n        for (let i=0; i<size;i++)\r\n        {\r\n            lines.antidiag.push(i*size+size-i-1)\r\n        }\r\n\r\n        for (let lineName in lines){\r\n            const line = lines[lineName];\r\n            const result = line.reduce(reducer, true)\r\n            if (result)\r\n            {\r\n                return squares[line[0]];\r\n            }\r\n        }\r\n        for (let i=0; i<squares.length; i++){\r\n            if (squares[i] === null)\r\n            {\r\n                return null\r\n            }\r\n        }\r\n        return 'T';\r\n    }\r\n\r\n\r\n    renderBoard(i)\r\n    {\r\n        return (\r\n            <Board key={i}\r\n                size={this.props.size}\r\n                squares={this.state.squares[i]}\r\n                winner={this.state.localWinners[i]}\r\n                clickable={this.isBoardValid(i)}\r\n                onClick={(p) => {this.handleClick(p, i)}}\r\n            />\r\n        );\r\n    }\r\n\r\n    render()\r\n    {\r\n      const grid = generateGridNxN(\r\n        'game', this.props.size, this.renderBoard);\r\n        return (\r\n          <div className=\"game-container\">\r\n              {grid}\r\n          </div>\r\n      );\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport Game from './components/Game.js';\r\n\r\nexport default class App extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"app\">\r\n                <Game key={0}\r\n                    size={4}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport './index.css';\nimport App from './App.js';\n\nReactDom.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}